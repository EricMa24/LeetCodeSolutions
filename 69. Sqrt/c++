/*
69. Sqrt
0ms, 6MB
*/

class Solution {
public:
    int mySqrt(int x) {
        if(x < 2) return x;
        // 2^0 <= 2^floor <= x <= 2^ceil <= 2^31 
        // determine the ceil
        int mask = 1 << 30;
        int ceil = 31;
        while((x & mask) == 0){
            mask >>= 1;
            ceil -= 1;
        }
        // ceil >= 1
        int floor = ceil - 1;
        printf("%d, %d", ceil, floor);
        
        // 2^(floor // 2) <= sqrt(x) <= 2^((ceil + 1)) // 2)
        int left = 1 << (floor / 2), right = 1 << ((ceil+1) / 2);
        if(ceil == 31) right = 46341;  // avoid overflow when mid*mid
        // bi-search
        while(right > left){
            int mid = left + (right - left) / 2;
            int x1 = mid * mid;
            
            if(x1 == x) return mid;
            else if(x1 < x) left = mid + 1;
            else right = mid;
        }
        return right-1;
    }
};
