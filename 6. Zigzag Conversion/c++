// 6. Zigzag Conversion
// 3ms, 8.3MB

class Solution{
public:
    string convert(string s, int numRows) {
        if(numRows == 1) return s;
        
        vector<string> groups;
        const int len = (numRows - 1) * 2;
        int n_groups = 1;
        while (n_groups * len < s.size()){
            ++n_groups;
        }
        
        string ret = "";
        const int size = s.size();
        // first el
        for(int i=0; i<n_groups; ++i){
            ret += s[i*len];
        }
        // jth and back jth
        for(int j=1; j<len/2; ++j){  // len is dual
            for(int i=0; i<n_groups; ++i){
                int pos1 = i*len + j, pos2 = i*len + len - j;
                if(pos1 < size) ret += s[pos1];
                if(pos2 < size) ret += s[pos2];
            }
        }
        
        // mid ones
        for(int i=0; i<n_groups; ++i){
            int pos = i*len + len/2;
            if(pos < size) ret += s[pos];
        }
        
        return ret;
    }
};
